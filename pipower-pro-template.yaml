substitutions:
  name: pipower-pro
  friendly_name: PiPower Pro
  factory_max_capacity: "2000"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: Smart UPS module
  # name_add_mac_suffix: true
  project:
    name: "sunfounder.pipower-pro"
    version: "v1.0.0"
  # includes:
  #   # - current-control.h
  #   - https://raw.githubusercontent.com/sunfounder/pipower-pro/main/current-control.h
  on_boot:
    priority: 800
    then:
      - text_sensor.template.publish:
          id: pipower_pro_version
          state: "v1.0.0"
      - switch.turn_on: pipower_pro_esp32_power
      - if:
          condition:
            lambda: return id(pipower_pro_power_button).state == true;
          then:
            - switch.turn_on: pipower_pro_power_switch
            - switch.turn_on: pipower_pro_external_output
            - switch.turn_on: pipower_pro_battery_output

esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

logger:
  level: WARN

api:

ota:

dashboard_import:
  package_import_url: github://sunfounder/pipower-pro/pipower-pro-template.yaml@main
  import_full_config: false # or true

wifi:
  ap:
    password: "12345678"

captive_portal:

globals:
  - id: pipower_pro_battery_max_capacity
    type: float
    restore_value: yes
    initial_value: '2000'
  - id: pipower_pro_battery_current_capacity
    type: float
    restore_value: yes
    initial_value: '2000'
  - id: pipower_pro_power_switch_current_state
    type: bool
    restore_value: no
    initial_value: 'true'
  - id: pipower_pro_charge_control_value
    type: float
    restore_value: no
    initial_value: '0'
  - id: pipower_pro_charge_control_last_error
    type: float
    restore_value: no
    initial_value: '0'
  - id: pipower_pro_charge_control_error_integral
    type: float
    restore_value: no
    initial_value: '0'
  # End of discharge voltage 2: 7% capacity
  - id: pipower_pro_edv2
    type: float
    restore_value: no
    initial_value: '6.8'
  # End of discharge voltage 1: 3% capacity
  - id: pipower_pro_edv1
    type: float
    restore_value: no
    initial_value: '6.5'
  # End of discharge voltage 0: 0% capacity
  - id: pipower_pro_edv0
    type: float
    restore_value: no
    initial_value: '6.2'
  # reset calibrate voltage:
  - id: pipower_pro_rcv
    type: float
    restore_value: no
    initial_value: '8'
  # edv2 is calibrated, lock calibrate incase of keep calibrating
  - id: pipower_pro_edv2_calibrated
    type: bool
    restore_value: yes
    initial_value: 'false'
  # End of discharge voltage 1: 3% capacity
  - id: pipower_pro_edv1_calibrated
    type: float
    restore_value: yes
    initial_value: 'false'
  # End of discharge voltage 0: 0% capacity
  - id: pipower_pro_edv0_calibrated
    type: float
    restore_value: yes
    initial_value: 'false'
  # simulate low power test
  - id: pipower_pro_simulate_low_power
    type: bool
    restore_value: no
    initial_value: 'false'

output:
  # - platform: custom
  #   type: float
  #   lambda: |-
  #     auto cc = new CurrentControl();
  #     App.register_component(cc);
  #     return {cc};
  #   outputs:
  #     id: pipower_pro_charge_current_control

  - platform: esp32_dac
    pin: 17
    id: pipower_pro_charge_current_control

switch:
  # Battery Output
  - platform: gpio
    name: Battery Output
    id: pipower_pro_battery_output
    pin: 
      number: 33
      inverted: false
  # External Output
  - platform: gpio
    name: External Output
    id: pipower_pro_external_output
    pin: 
      number: 15
      inverted: false
  # ESP32 Power
  - platform: gpio
    name: ESP32 Power
    id: pipower_pro_esp32_power
    restore_mode : ALWAYS_ON
    pin: 
      number: 6
      inverted: false
  # Power Switch
  - platform: template
    name: Power Switch
    id: pipower_pro_power_switch
    icon: mdi:power
    device_class: SWITCH
    lambda: return id(pipower_pro_power_switch_current_state);
    turn_on_action:
      - lambda: id(pipower_pro_power_switch_current_state) = true;
      - switch.turn_on: pipower_pro_external_output
      - switch.turn_on: pipower_pro_battery_output
      - switch.turn_on: pipower_pro_esp32_power
    turn_off_action:
      - lambda: id(pipower_pro_power_switch_current_state) = false;
      - switch.turn_off: pipower_pro_external_output
      - switch.turn_off: pipower_pro_battery_output
      - if:
          condition: 
            binary_sensor.is_off: pipower_pro_always_on
          then:
            - switch.turn_off: pipower_pro_esp32_power
  # Battery Indicator 25
  - platform: gpio
    name: Battery Indicator 25
    id: pipower_pro_battery_indicator_25
    internal: true
    restore_mode: DISABLED
    pin: 
      number: 11
      inverted: true
  # Battery Indicator 50
  - platform: gpio
    name: Battery Indicator 50
    id: pipower_pro_battery_indicator_50
    internal: true
    restore_mode: DISABLED
    pin: 
      number: 12
      inverted: true
  # Battery Indicator 75
  - platform: gpio
    name: Battery Indicator 75
    id: pipower_pro_battery_indicator_75
    internal: true
    restore_mode: DISABLED
    pin: 
      number: 13
      inverted: true
  # Battery Indicator 100
  - platform: gpio
    name: Battery Indicator 100
    id: pipower_pro_battery_indicator_100
    internal: true
    restore_mode: DISABLED
    pin: 
      number: 14
      inverted: true
  # Sub Device Switch
  - platform: gpio
    name: Sub Device Power
    id: pipower_pro_sub_device_power
    restore_mode: ALWAYS_ON
    pin: 
      number: 41
  # test
  - platform: template
    name: Simulate Low Power
    id: pipower_pro_simulate_low_power_switch
    lambda: return id(pipower_pro_simulate_low_power);
    turn_on_action:
      - lambda: id(pipower_pro_simulate_low_power) = true;
    turn_off_action:
      - lambda: id(pipower_pro_simulate_low_power) = false;


sensor:
  # Battery Voltage
  - platform: adc
    pin: 3
    name: Battery Voltage
    id: pipower_pro_battery_voltage
    attenuation: 11db
    update_interval: 1s
    accuracy_decimals: 2
    unit_of_measurement: V
    # raw: true
    filters:
      # 2.669 / 8191
      # - multiply: 0.00032584544011720
      # 120K : 51K resistor divider
      - lambda: return x * (120.0f + 51.0f) / 51.0f;
    on_value:
      then:
        - lambda: |-
            // CEDV Calibration for battery capacity
            // qPass: 
            float qPass = id(pipower_pro_battery_max_capacity) - id(pipower_pro_battery_current_capacity);
            if (x <= id(pipower_pro_edv0)) {
              if (!id(pipower_pro_edv0_calibrated)) {
                id(pipower_pro_battery_max_capacity) = qPass;
                id(pipower_pro_battery_current_capacity) = 0;
                id(pipower_pro_edv0_calibrated) = true;
                ESP_LOGW("Battery", "Battery Lower than 0%, calibrate, %f/%f", id(pipower_pro_battery_current_capacity), id(pipower_pro_battery_max_capacity));
              }
            } else if (x <= id(pipower_pro_edv1)) {
              if (!id(pipower_pro_edv1_calibrated)) {
                id(pipower_pro_battery_max_capacity) = qPass + id(pipower_pro_battery_max_capacity) * 0.03;
                id(pipower_pro_battery_current_capacity) = id(pipower_pro_battery_max_capacity) - qPass;
                id(pipower_pro_edv1_calibrated) = true;
                ESP_LOGW("Battery", "Battery Lower than 3%, calibrate, %f/%f", id(pipower_pro_battery_current_capacity), id(pipower_pro_battery_max_capacity));
              }
            } else if (x <= id(pipower_pro_edv2)) {
              if (!id(pipower_pro_edv2_calibrated)) {
                id(pipower_pro_battery_max_capacity) = qPass + id(pipower_pro_battery_max_capacity) * 0.07;
                id(pipower_pro_battery_current_capacity) = id(pipower_pro_battery_max_capacity) - qPass;
                id(pipower_pro_edv2_calibrated) = true;
                ESP_LOGW("Battery", "Battery Lower than 7%, calibrate, %f/%f", id(pipower_pro_battery_current_capacity), id(pipower_pro_battery_max_capacity));
              }
            } else if (x > id(pipower_pro_rcv)) {
              if (id(pipower_pro_edv0_calibrated) || id(pipower_pro_edv1_calibrated) || id(pipower_pro_edv2_calibrated)) {
                id(pipower_pro_edv0_calibrated) = false;
                id(pipower_pro_edv1_calibrated) = false;
                id(pipower_pro_edv2_calibrated) = false;
                ESP_LOGW("Battery", "Battery Over 8V, reset calibrate");
              }
            }
  # Battery Current
  - platform: adc
    pin: 5
    name: Battery Current
    id: pipower_pro_battery_current
    attenuation: 11db
    update_interval: 1s
    accuracy_decimals: 2
    unit_of_measurement: A
    # raw: true
    filters:
      # 2.669 / 8191
      # - multiply: 0.00032584544011720
      # Differencial amplified 100 times, devided by 0.005 ohm resistor
      # with 1.4v reference voltage, makes it bidirectional.
      - lambda: |-
          return -(x - 1.43f) / 100.0f / 0.005f;
  # Battery Power
  - platform: template
    name: Battery Power
    id: pipower_pro_battery_power
    update_interval: 1s
    unit_of_measurement: W
    accuracy_decimals: 2
    device_class: power
    lambda: return id(pipower_pro_battery_voltage).state * id(pipower_pro_battery_current).state;
  # Battery Capacity
  - platform: template
    name: Battery Capacity
    id: pipower_pro_battery_capacity
    unit_of_measurement: mAh
    update_interval: 1s
    device_class: energy
    accuracy_decimals: 0
    lambda: |-
      if (!id(pipower_pro_battery_current).has_state()) return false;
      id(pipower_pro_battery_current_capacity) += id(pipower_pro_battery_current).state * 1000 / 3600.0f;
      if (id(pipower_pro_battery_current_capacity) > $factory_max_capacity) {
        id(pipower_pro_battery_current_capacity) = $factory_max_capacity;
      }
      if  (id(pipower_pro_battery_current_capacity) > id(pipower_pro_battery_max_capacity)) {
        id(pipower_pro_battery_max_capacity) = id(pipower_pro_battery_current_capacity);
      }
      if (id(pipower_pro_battery_current_capacity) < 0) {
        id(pipower_pro_battery_current_capacity) = 0;
      }
      return id(pipower_pro_battery_current_capacity);
  # Battery Level
  - platform: template
    name: Battery Level
    id: pipower_pro_battery_level
    update_interval: 1s
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    lambda: |-
      // test
      if (id(pipower_pro_simulate_low_power)) {
        return 10.0f;
      }
      if (id(pipower_pro_battery_capacity_algorithm).active_index() == 0) {
        return (id(pipower_pro_battery_voltage).state - id(pipower_pro_edv0)) / (8.4 - id(pipower_pro_edv0)) * 100.0f;
      } else {
        return id(pipower_pro_battery_capacity).state / id(pipower_pro_battery_max_capacity) * 100.0f;
      }
    on_value:
      then:
        - lambda: |-
            if (id(pipower_pro_power_switch).state == true || id(pipower_pro_is_charging).state == true) {
              float level = id(pipower_pro_battery_level).state;
              if (level > 75) {
                id(pipower_pro_battery_indicator_25).turn_on();
                id(pipower_pro_battery_indicator_50).turn_on();
                id(pipower_pro_battery_indicator_75).turn_on();
                if (id(pipower_pro_is_charging).state == true) {
                  id(pipower_pro_battery_indicator_100).toggle();
                } else {
                  id(pipower_pro_battery_indicator_100).turn_on();
                }
              } else if (level > 50) {
                id(pipower_pro_battery_indicator_25).turn_on();
                id(pipower_pro_battery_indicator_50).turn_on();
                id(pipower_pro_battery_indicator_100).turn_off();
                if (id(pipower_pro_is_charging).state == true) {
                  id(pipower_pro_battery_indicator_75).toggle();
                } else {
                  id(pipower_pro_battery_indicator_75).turn_on();
                }
              } else if (level > 25) {
                id(pipower_pro_battery_indicator_25).turn_on();
                id(pipower_pro_battery_indicator_75).turn_off();
                id(pipower_pro_battery_indicator_100).turn_off();
                if (id(pipower_pro_is_charging).state == true) {
                  id(pipower_pro_battery_indicator_50).toggle();
                } else {
                  id(pipower_pro_battery_indicator_50).turn_on();
                }
              } else if (level > 10) {
                id(pipower_pro_battery_indicator_50).turn_off();
                id(pipower_pro_battery_indicator_75).turn_off();
                id(pipower_pro_battery_indicator_100).turn_off();
                if (id(pipower_pro_is_charging).state == true) {
                  id(pipower_pro_battery_indicator_25).toggle();
                } else {
                  id(pipower_pro_battery_indicator_25).turn_on();
                }
              } else {
                id(pipower_pro_battery_indicator_50).turn_off();
                id(pipower_pro_battery_indicator_75).turn_off();
                id(pipower_pro_battery_indicator_100).turn_off();
                if (id(pipower_pro_is_charging).state == true) {
                  id(pipower_pro_battery_indicator_25).toggle();
                } else {
                  id(pipower_pro_battery_indicator_25).turn_off();
                }
              }
            } else {
              id(pipower_pro_battery_indicator_25).turn_off();
              id(pipower_pro_battery_indicator_50).turn_off();
              id(pipower_pro_battery_indicator_75).turn_off();
              id(pipower_pro_battery_indicator_100).turn_off();
            } 
  # Output Voltage
  - platform: adc
    pin: 1
    name: Output Voltage
    id: pipower_pro_output_voltage
    attenuation: 11db
    update_interval: 1s
    unit_of_measurement: V
    accuracy_decimals: 2
    # raw: true
    filters:
      # 2.669 / 8191
      # - multiply: 0.00032584544011720
      # 100K : 100K resistor divider
      - lambda: return x * 2.0f;
  # Output Current
  - platform: adc
    pin: 4
    name: Output Current
    id: pipower_pro_output_current
    attenuation: 11db
    update_interval: 1s
    accuracy_decimals: 2
    unit_of_measurement: A
    # raw: true
    filters:
      # 2.669 / 8191
      # - multiply: 0.00032584544011720
      # Differencial amplified 100 times, devided by 0.005 ohm resistor.
      - lambda: return x / 100.0f / 0.005f;
  # Output Power
  - platform: template
    name: Output Power
    id: "pipower_pro_output_power"
    update_interval: 1s
    unit_of_measurement: W
    device_class: power
    lambda: return id(pipower_pro_output_voltage).state * id(pipower_pro_output_current).state;
  # Output Energy
  - platform: integration
    name: Output Energy
    id: "pipower_pro_output_energy"
    sensor: pipower_pro_output_power
    unit_of_measurement: Wh
    device_class: energy
    time_unit: s
    filters:
      - lambda: return x / 3600.0f;
  # Input Voltage
  - platform: adc
    pin: 2
    name: Input Voltage
    id: pipower_pro_input_voltage
    attenuation: 11db
    update_interval: 1s
    accuracy_decimals: 1
    unit_of_measurement: V
    # raw: true
    filters:
      # 2.669 / 8191
      # - multiply: 0.00032584544011720
      # 100K : 100K resistor divider
      - lambda: return x * 2.0f;
    on_value:
      then:
        - lambda: |-
            // PID control for battery charging
            // if not charging, do nothing
            // if (!id(pipower_pro_is_charging).state) return;
            if (!id(pipower_pro_power_switch_current_state)) {
              id(pipower_pro_charge_current_control).set_level(1);
              return;
            }
            float state = id(pipower_pro_input_voltage).state;
            float targetVoltage = 4.9f;
            float kp = 0.1f;
            float ki = 0.0f;
            float kd = 0.1f;
            float error = targetVoltage - state;
            float offset = kp * error + ki * id(pipower_pro_charge_control_error_integral) + kd * (error - id(pipower_pro_charge_control_last_error));
            id(pipower_pro_charge_control_error_integral) += error;
            id(pipower_pro_charge_control_last_error) = error;
            id(pipower_pro_charge_control_value) -= offset;
            if (id(pipower_pro_charge_control_value) > 1.0f) id(pipower_pro_charge_control_value) = 1.0f;
            if (id(pipower_pro_charge_control_value) < 0.0f) id(pipower_pro_charge_control_value) = 0.0f;
            ESP_LOGD("main", "Input voltage: %f, target: %f, error: %f, offset: %f, charge control: %f", state, targetVoltage, error, offset, id(pipower_pro_charge_control_value));
            id(pipower_pro_charge_current_control).set_level(id(pipower_pro_charge_control_value));

binary_sensor:
  # Is Charging
  - platform: template
    name: Is Charging
    id: pipower_pro_is_charging
    device_class: BATTERY_CHARGING
    lambda: return id(pipower_pro_battery_current).state > 0.1;
  # Power Button
  - platform: gpio
    pin: 
      number: 16
      inverted: true
    name: Power Button
    id: pipower_pro_power_button
    publish_initial_state: true
    on_state:
      then:
        - if:
            condition:
              binary_sensor.is_on: pipower_pro_power_button
            then:
              - switch.turn_on: pipower_pro_power_switch
    on_multi_click:
    - timing:
        - ON for at least 3s
      then:
        - switch.turn_off: pipower_pro_power_switch
  # Battery Low
  - platform: template
    name: Battery Low
    device_class: BATTERY
    lambda: |-
      if (id(pipower_pro_battery_level).state < 0.1 || id(pipower_pro_battery_voltage).state <= id(pipower_pro_edv2)) {
        return true;
      } else {
        return false;
      }
  # External Power
  - platform: template
    name: External Power
    device_class: PLUG
    lambda: |-
      if (id(pipower_pro_input_voltage).state > 4.0) {
        return true;
      } else {
        return false;
      }
  # Power Source State
  - platform: gpio
    pin: 34
    internal: true
    id: pipower_pro_power_source_state
  # Always On
  - platform: gpio
    name: Always On
    pin: 
      number: 7
      mode: INPUT_PULLUP
      inverted: true
    id: pipower_pro_always_on
  # Sub Device Power State
  - platform: gpio
    name: Sub Device Power State
    pin: 42
    id: pipower_pro_sub_device_power_state

button:
  # Capacity Reset
  - platform: template
    name: Capacity Reset
    icon: mdi:battery-sync
    on_press:
      then:
        - lambda: |-
            id(pipower_pro_battery_current_capacity) = id(pipower_pro_battery_max_capacity);
  # Output Energy Reset
  - platform: template
    name: Output Energy Reset
    icon: mdi:sync
    on_press:
      then:
        - lambda: |-
            id(pipower_pro_output_energy).reset();
  # Factory Reset
  - platform: factory_reset
    name: Factory Reset

text_sensor:
  # Version
  - platform: template
    name: "Version"
    id: pipower_pro_version
  # Power Source
  - platform: template
    name: "Power Source"
    update_interval: 1s
    icon: mdi:power-plug-battery-outline
    lambda: |-
      // 0: OFF, 1: External, -1: Battery
      if (id(pipower_pro_power_switch).state == false) {
        return {"OFF"};
      } else if (id(pipower_pro_power_source_state).state) {
        return {"External"};
      } else {
        return {"Battery"};
      }

select:
  # Battery Capacity Algorithm
  - platform: template
    name: "Battery Capacity Algorithm"
    id: pipower_pro_battery_capacity_algorithm
    optimistic: true
    restore_value: true
    options:
      - Voltage Map
      - Coulomb Count (Beta)
    initial_option: Voltage Map
