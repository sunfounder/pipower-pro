substitutions:
  name: pipower-pro
  friendly_name: PiPower Pro

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: Smart UPS module
  # name_add_mac_suffix: true
  project:
    name: "SunFounder.PiPower-Pro"
    version: "v1.0.0"
  on_boot:
    priority: -100
    then:
      - text_sensor.template.publish:
          id: pipower_pro_version
          state: "v1.0.0"
      - output.set_level:
          id: pipower_pro_charge_current_control
          level: 0.0
      - if:
          condition:
            binary_sensor.is_on: pipower_pro_power_button
          then:
            - switch.turn_on: pipower_pro_esp32_power
            - switch.turn_on: pipower_pro_power_switch
            - switch.turn_on: pipower_pro_external_output
            - switch.turn_on: pipower_pro_battery_output

esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

logger:
  # level: WARN

api:
  services:
    - service: set_battery_factory_capacity
      variables:
        capacity: int
      then:
        - lambda: id(pipower_pro_battery_factory_capacity_value) = capacity;
    - service: enable_coulomb_count_beta
      variables:
        enable_coulomb_count_beta: bool
      then:
        - lambda: id(pipower_pro_enable_coulomb_count) = enable_coulomb_count_beta;
    - service: reset_capacity
      then:
        - lambda: id(pipower_pro_battery_current_capacity) = id(pipower_pro_battery_factory_capacity_value);
    - service: reset_output_energy
      then:
        - sensor.integration.reset:  pipower_pro_output_energy
    - service: set_edv2
      variables:
        voltage: float
      then:
        - lambda: id(pipower_pro_edv2) = voltage;
    - service: set_edv1
      variables:
        voltage: float
      then:
        - lambda: id(pipower_pro_edv1) = voltage;
    - service: set_edv0
      variables:
        voltage: float
      then:
        - lambda: id(pipower_pro_edv0) = voltage;
    - service: set_rcv
      variables:
        voltage: float
      then:
        - lambda: id(pipower_pro_rcv) = voltage;
    - service: simulate_low_power
      variables:
        enable: bool
      then:
        - lambda: id(pipower_pro_simulate_low_power) = enable;

ota:
  on_begin:
    then:
      - lambda: |-
          ESP_LOGI("OTA", "OTA update started");
          id(pipower_pro_status_led_state) = 3;
  on_progress:
    then:
      - lambda: |-
          ESP_LOGI("OTA", "OTA progress, %d%%", x);
          id(pipower_pro_show_battery_indicator)->execute(x);

dashboard_import:
  package_import_url: github://sunfounder/pipower-pro/pipower-pro-template.yaml@main
  import_full_config: false # or true

wifi:
  ap:
    ssid: "Pipower-Pro Fallback Hotspot"
    password: "12345678"

captive_portal:

globals:
  - id: pipower_pro_battery_factory_capacity_value
    type: float
    restore_value: yes
    initial_value: '2000'
  - id: pipower_pro_battery_max_capacity
    type: float
    restore_value: yes
    initial_value: '2000'
  - id: pipower_pro_battery_current_capacity
    type: float
    restore_value: yes
    initial_value: '2000'
  - id: pipower_pro_power_switch_current_state
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: pipower_pro_charge_control_value
    type: float
    restore_value: yes
    initial_value: '0'
  - id: pipower_pro_charge_control_last_error
    type: float
    restore_value: yes
    initial_value: '0'
  - id: pipower_pro_charge_control_error_integral
    type: float
    restore_value: yes
    initial_value: '0'
  # End of discharge voltage 2: 7% capacity
  - id: pipower_pro_edv2
    type: float
    restore_value: yes
    initial_value: '6.8'
  # End of discharge voltage 1: 3% capacity
  - id: pipower_pro_edv1
    type: float
    restore_value: yes
    initial_value: '6.5'
  # End of discharge voltage 0: 0% capacity
  - id: pipower_pro_edv0
    type: float
    restore_value: yes
    initial_value: '6.2'
  # reset calibrate voltage:
  - id: pipower_pro_rcv
    type: float
    restore_value: yes
    initial_value: '8'
  # edv2 is calibrated, lock calibrate incase of keep calibrating
  - id: pipower_pro_edv2_calibrated
    type: bool
    restore_value: yes
    initial_value: 'false'
  # End of discharge voltage 1: 3% capacity
  - id: pipower_pro_edv1_calibrated
    type: float
    restore_value: yes
    initial_value: 'false'
  # End of discharge voltage 0: 0% capacity
  - id: pipower_pro_edv0_calibrated
    type: float
    restore_value: yes
    initial_value: 'false'
  # Enable coulomb count beta or not
  - id: pipower_pro_enable_coulomb_count
    type: bool
    restore_value: yes
    initial_value: 'false'
  # Status LED state: 0: off, 1: on, 2: blink slow, 3: blink fast
  - id: pipower_pro_status_led_state
    type: int
    restore_value: no
    initial_value: '0'
  # Status LED count for different blink speed
  - id: pipower_pro_status_led_count
    type: int
    restore_value: no
    initial_value: '0'
  # Wi-Fi is connected
  - id: pipower_pro_wifi_connected
    type: bool
    restore_value: no
    initial_value: 'false'
  # Last Wi-Fi is connected, for Wi-Fi connected state change
  - id: pipower_pro_last_wifi_connected
    type: bool
    restore_value: no
    initial_value: 'false'
  # simulate low power test
  - id: pipower_pro_simulate_low_power
    type: bool
    restore_value: no
    initial_value: 'false'


output:
  # - platform: esp32_dac
  #   pin: 17
  #   id: pipower_pro_charge_current_control

  - platform: template
    type: float
    id: pipower_pro_charge_current_control
    write_action:
      - lambda: |-
          int value = state * 255;
          dacWrite(17, value);


switch:
  # Battery Output
  - platform: gpio
    name: Battery Output
    id: pipower_pro_battery_output
    pin: 
      number: 33
      inverted: false
  # External Output
  - platform: gpio
    name: External Output
    id: pipower_pro_external_output
    pin: 
      number: 15
      inverted: false
  # ESP32 Power
  - platform: gpio
    name: ESP32 Power
    id: pipower_pro_esp32_power
    restore_mode : "ALWAYS_OFF"
    pin: 
      number: 6
      inverted: false
    on_turn_on:
      - globals.set:
          id: pipower_pro_status_led_state
          value: '2'
    on_turn_off:
      - globals.set:
          id: pipower_pro_status_led_state
          value: '0'
  # Power Switch
  - platform: template
    name: Power Switch
    id: pipower_pro_power_switch
    icon: mdi:power
    device_class: SWITCH
    lambda: return id(pipower_pro_power_switch_current_state);
    turn_on_action:
      - switch.turn_on: pipower_pro_external_output
      - switch.turn_on: pipower_pro_battery_output
      - globals.set:
          id: pipower_pro_power_switch_current_state
          value: 'true'
    turn_off_action:
      - switch.turn_off: pipower_pro_external_output
      - switch.turn_off: pipower_pro_battery_output
      - globals.set:
          id: pipower_pro_power_switch_current_state
          value: 'false'
  # Status LED
  - platform: gpio
    name: Status LED
    internal: true
    id: pipower_pro_status_led
    pin: 
      number: 35
  # Battery Indicator 25
  - platform: gpio
    name: Battery Indicator 25
    id: pipower_pro_battery_indicator_25
    internal: true
    restore_mode: DISABLED
    pin: 
      number: 11
      inverted: true
  # Battery Indicator 50
  - platform: gpio
    name: Battery Indicator 50
    id: pipower_pro_battery_indicator_50
    internal: true
    restore_mode: DISABLED
    pin: 
      number: 12
      inverted: true
  # Battery Indicator 75
  - platform: gpio
    name: Battery Indicator 75
    id: pipower_pro_battery_indicator_75
    internal: true
    restore_mode: DISABLED
    pin: 
      number: 13
      inverted: true
  # Battery Indicator 100
  - platform: gpio
    name: Battery Indicator 100
    id: pipower_pro_battery_indicator_100
    internal: true
    restore_mode: DISABLED
    pin: 
      number: 14
      inverted: true
  # Sub Device Switch
  - platform: gpio
    name: Sub Device Power
    id: pipower_pro_sub_device_power
    restore_mode: ALWAYS_ON
    pin: 
      number: 41


sensor:
  # Battery Voltage
  - platform: adc
    pin: 3
    name: Battery Voltage
    id: pipower_pro_battery_voltage
    attenuation: 11db
    update_interval: 1s
    accuracy_decimals: 2
    unit_of_measurement: V
    filters:
      # 120K : 51K resistor divider
      - lambda: return x * (120.0f + 51.0f) / 51.0f;
    on_value:
      then:
        - lambda: id(pipower_pro_calibrate_capacity)->execute(x);
  # Battery Current Reference
  - platform: adc
    pin: 7
    name: Battery Current Reference
    id: pipower_pro_battery_current_reference
    attenuation: 11db
    internal: true
    update_interval: 1s
    accuracy_decimals: 2
    unit_of_measurement: V
  # Battery Current
  - platform: adc
    pin: 5
    name: Battery Current
    id: pipower_pro_battery_current
    attenuation: 11db
    update_interval: 1s
    accuracy_decimals: 2
    unit_of_measurement: A
    filters:
      # Differencial amplified 100 times, devided by 0.005 ohm resistor
      # with reference voltage, makes it bidirectional.
      - lambda: |-
          return -(x - id(pipower_pro_battery_current_reference).state) / 100.0f / 0.005f;
  # Battery Power
  - platform: template
    name: Battery Power
    id: pipower_pro_battery_power
    update_interval: 1s
    unit_of_measurement: W
    accuracy_decimals: 2
    device_class: power
    lambda: return id(pipower_pro_battery_voltage).state * id(pipower_pro_battery_current).state;
  # Battery Capacity
  - platform: template
    name: Battery Capacity
    id: pipower_pro_battery_capacity
    unit_of_measurement: mAh
    update_interval: 1s
    device_class: energy
    accuracy_decimals: 0
    lambda: |-
      if (!id(pipower_pro_battery_current).has_state()) return 0.0f;
      id(pipower_pro_battery_current_capacity) += id(pipower_pro_battery_current).state * 1000 / 3600.0f;
      if (id(pipower_pro_battery_current_capacity) > id(pipower_pro_battery_factory_capacity_value)) {
        id(pipower_pro_battery_current_capacity) = id(pipower_pro_battery_factory_capacity_value);
      }
      if  (id(pipower_pro_battery_current_capacity) > id(pipower_pro_battery_max_capacity)) {
        id(pipower_pro_battery_max_capacity) = id(pipower_pro_battery_current_capacity);
      }
      if (id(pipower_pro_battery_current_capacity) < 0) {
        id(pipower_pro_battery_current_capacity) = 0;
      }
      return id(pipower_pro_battery_current_capacity);
  # Battery Level
  - platform: template
    name: Battery Level
    id: pipower_pro_battery_level
    update_interval: 1s
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    lambda: |-
      int level = 0;
      if (id(pipower_pro_enable_coulomb_count) == false) {
        level = (id(pipower_pro_battery_voltage).state - id(pipower_pro_edv0)) / (8.4 - id(pipower_pro_edv0)) * 100.0f;
      } else {
        level = id(pipower_pro_battery_capacity).state / id(pipower_pro_battery_max_capacity) * 100.0f;
      }
      // test: simulate a low power situation
      if (id(pipower_pro_simulate_low_power)) {
        level = 10;
      }
      return level;
    on_value:
      then:
        - lambda: id(pipower_pro_show_battery_indicator)->execute(x);
  # Output Voltage
  - platform: adc
    pin: 1
    name: Output Voltage
    id: pipower_pro_output_voltage
    attenuation: 11db
    update_interval: 1s
    unit_of_measurement: V
    accuracy_decimals: 2
    filters:
      # 100K : 100K resistor divider
      - lambda: return x * 2.0f;
  # Output Current
  - platform: adc
    pin: 4
    name: Output Current
    id: pipower_pro_output_current
    attenuation: 11db
    update_interval: 1s
    accuracy_decimals: 2
    unit_of_measurement: A
    filters:
      # Differencial amplified 100 times, devided by 0.005 ohm resistor.
      - lambda: return x / 100.0f / 0.005f;
  # Output Power
  - platform: template
    name: Output Power
    id: "pipower_pro_output_power"
    update_interval: 1s
    unit_of_measurement: W
    device_class: power
    lambda: return id(pipower_pro_output_voltage).state * id(pipower_pro_output_current).state;
  # Output Energy
  - platform: integration
    name: Output Energy
    id: "pipower_pro_output_energy"
    sensor: pipower_pro_output_power
    unit_of_measurement: Wh
    device_class: energy
    time_unit: s
    filters:
      - lambda: return x / 3600.0f;
  # Input Voltage
  - platform: adc
    pin: 2
    name: Input Voltage
    id: pipower_pro_input_voltage
    attenuation: 11db
    update_interval: 1s
    accuracy_decimals: 1
    unit_of_measurement: V
    filters:
      # 100K : 100K resistor divider
      - lambda: return x * 2.0f;
    on_value:
      then:
        - lambda: id(pipower_pro_set_charge_current)->execute(x);
  # Battery factory capacity
  - platform: template
    name: Battery Factory Capacity
    id: pipower_pro_battery_factory_capacity
    unit_of_measurement: mAh
    accuracy_decimals: 0
    lambda: return id(pipower_pro_battery_factory_capacity_value);

binary_sensor:
  # Is Charging
  - platform: template
    name: Is Charging
    id: pipower_pro_is_charging
    device_class: BATTERY_CHARGING
    lambda: return id(pipower_pro_battery_current).state > 0.1;
  # Power Button
  - platform: gpio
    pin: 
      number: 16
      inverted: true
    name: Power Button
    internal: true
    id: pipower_pro_power_button
    publish_initial_state: true
    on_state:
      then:
        - if:
            condition:
              binary_sensor.is_on: pipower_pro_power_button
            then:
              - switch.turn_on: pipower_pro_power_switch
              - switch.turn_on: pipower_pro_esp32_power
    on_multi_click:
        - timing:
            - ON for at least 2s
          then:
            - switch.turn_off: pipower_pro_power_switch
        - timing:
            - ON for at least 3s
          then:
            - switch.turn_off: pipower_pro_esp32_power
  - platform: template
    name: Battery Low
    device_class: BATTERY
    lambda: |-
      if (id(pipower_pro_battery_level).state < 0.1 || id(pipower_pro_battery_voltage).state <= id(pipower_pro_edv2)) {
        return true;
      } else {
        return false;
      }
  # External Power
  - platform: template
    name: External Power
    id: pipower_pro_external_power
    device_class: PLUG
    lambda: |-
      if (id(pipower_pro_input_voltage).state > 4.0) {
        return true;
      } else {
        return false;
      }
  # Power Source State
  - platform: gpio
    pin: 34
    internal: true
    id: pipower_pro_power_source_state
  # Sub Device Power State
  - platform: gpio
    name: Sub Device Power State
    pin: 42
    id: pipower_pro_sub_device_power_state


button:
  # Factory Reset
  - platform: factory_reset
    name: Factory Reset


text_sensor:
  # Version
  - platform: template
    name: "Version"
    id: pipower_pro_version
  # Power Source
  - platform: template
    name: "Power Source"
    update_interval: 1s
    icon: mdi:power-plug-battery-outline
    lambda: |-
      if (id(pipower_pro_power_switch).state == false) {
        return {"OFF"};
      } else if (id(pipower_pro_power_source_state).state) {
        return {"External"};
      } else {
        return {"Battery"};
      }
  - platform: template
    name: "Battery Capacity Algorithm"
    id: pipower_pro_battery_capacity_algorithm
    lambda: |-
      if (id(pipower_pro_enable_coulomb_count) == true) {
        return {"Coulomb Count (Beta)"};
      } else {
        return {"Voltage Map"};
      }

script:
  # CEDV Calibration for battery capacity
  - id: pipower_pro_calibrate_capacity
    parameters:
      voltage: float
    then:
      - lambda: |-
          // qPass, quantity of charge passed: 
          float qPass = id(pipower_pro_battery_max_capacity) - id(pipower_pro_battery_current_capacity);
          if (voltage <= id(pipower_pro_edv0)) {
            if (!id(pipower_pro_edv0_calibrated)) {
              id(pipower_pro_battery_max_capacity) = qPass;
              id(pipower_pro_battery_current_capacity) = 0;
              id(pipower_pro_edv0_calibrated) = true;
              ESP_LOGI("Battery", "Battery Lower than 0%, calibrate, %f/%f", id(pipower_pro_battery_current_capacity), id(pipower_pro_battery_max_capacity));
            }
          } else if (voltage <= id(pipower_pro_edv1)) {
            if (!id(pipower_pro_edv1_calibrated)) {
              id(pipower_pro_battery_max_capacity) = qPass + id(pipower_pro_battery_max_capacity) * 0.03;
              id(pipower_pro_battery_current_capacity) = id(pipower_pro_battery_max_capacity) - qPass;
              id(pipower_pro_edv1_calibrated) = true;
              ESP_LOGI("Battery", "Battery Lower than 3%, calibrate, %f/%f", id(pipower_pro_battery_current_capacity), id(pipower_pro_battery_max_capacity));
            }
          } else if (voltage <= id(pipower_pro_edv2)) {
            if (!id(pipower_pro_edv2_calibrated)) {
              id(pipower_pro_battery_max_capacity) = qPass + id(pipower_pro_battery_max_capacity) * 0.07;
              id(pipower_pro_battery_current_capacity) = id(pipower_pro_battery_max_capacity) - qPass;
              id(pipower_pro_edv2_calibrated) = true;
              ESP_LOGI("Battery", "Battery Lower than 7%, calibrate, %f/%f", id(pipower_pro_battery_current_capacity), id(pipower_pro_battery_max_capacity));
            }
          } else if (voltage > id(pipower_pro_rcv)) {
            if (id(pipower_pro_edv0_calibrated) || id(pipower_pro_edv1_calibrated) || id(pipower_pro_edv2_calibrated)) {
              id(pipower_pro_edv0_calibrated) = false;
              id(pipower_pro_edv1_calibrated) = false;
              id(pipower_pro_edv2_calibrated) = false;
              ESP_LOGI("Battery", "Battery Over 8V, reset calibrate");
            }
          }
  # Set Battery Indicator according to battery level
  - id: pipower_pro_show_battery_indicator
    parameters:
      level: float
    then:
      - lambda: |-
          if (id(pipower_pro_power_switch).state == true || id(pipower_pro_input_voltage).state > 3.5f) {
            if (level > 75) {
              id(pipower_pro_battery_indicator_25).turn_on();
              id(pipower_pro_battery_indicator_50).turn_on();
              id(pipower_pro_battery_indicator_75).turn_on();
              if (id(pipower_pro_is_charging).state == true) {
                id(pipower_pro_battery_indicator_100).toggle();
              } else {
                id(pipower_pro_battery_indicator_100).turn_on();
              }
            } else if (level > 50) {
              id(pipower_pro_battery_indicator_25).turn_on();
              id(pipower_pro_battery_indicator_50).turn_on();
              id(pipower_pro_battery_indicator_100).turn_off();
              if (id(pipower_pro_is_charging).state == true) {
                id(pipower_pro_battery_indicator_75).toggle();
              } else {
                id(pipower_pro_battery_indicator_75).turn_on();
              }
            } else if (level > 25) {
              id(pipower_pro_battery_indicator_25).turn_on();
              id(pipower_pro_battery_indicator_75).turn_off();
              id(pipower_pro_battery_indicator_100).turn_off();
              if (id(pipower_pro_is_charging).state == true) {
                id(pipower_pro_battery_indicator_50).toggle();
              } else {
                id(pipower_pro_battery_indicator_50).turn_on();
              }
            } else if (level > 10) {
              id(pipower_pro_battery_indicator_50).turn_off();
              id(pipower_pro_battery_indicator_75).turn_off();
              id(pipower_pro_battery_indicator_100).turn_off();
              if (id(pipower_pro_is_charging).state == true) {
                id(pipower_pro_battery_indicator_25).toggle();
              } else {
                id(pipower_pro_battery_indicator_25).turn_on();
              }
            } else {
              id(pipower_pro_battery_indicator_50).turn_off();
              id(pipower_pro_battery_indicator_75).turn_off();
              id(pipower_pro_battery_indicator_100).turn_off();
              if (id(pipower_pro_is_charging).state == true) {
                id(pipower_pro_battery_indicator_25).toggle();
              } else {
                id(pipower_pro_battery_indicator_25).turn_off();
              }
            }
          } else {
            id(pipower_pro_battery_indicator_25).turn_off();
            id(pipower_pro_battery_indicator_50).turn_off();
            id(pipower_pro_battery_indicator_75).turn_off();
            id(pipower_pro_battery_indicator_100).turn_off();
          } 
  # Set Charge Current according to input voltage
  - id: pipower_pro_set_charge_current
    parameters:
      input_voltage: float
    then:
      - lambda: |-
          // If not power on, set charge current to maximum
          if (!id(pipower_pro_power_switch_current_state)) {
            id(pipower_pro_charge_current_control).set_level(0);
            return;
          }
          // PID control for battery charging
          float targetVoltage = 4.9f;
          float kp = 0.1f;
          float ki = 0.0f;
          float kd = 0.1f;
          float error = input_voltage - targetVoltage;
          float offset = kp * error + ki * id(pipower_pro_charge_control_error_integral) + kd * (error - id(pipower_pro_charge_control_last_error));
          id(pipower_pro_charge_control_error_integral) += error;
          id(pipower_pro_charge_control_last_error) = error;
          id(pipower_pro_charge_control_value) -= offset;
          // Max voltage is 1.5V so max value is 1.5V / 3.3V = 0.4545
          float maxValue = 0.4545;
          if (id(pipower_pro_charge_control_value) > maxValue) id(pipower_pro_charge_control_value) = maxValue;
          if (id(pipower_pro_charge_control_value) < 0.0f) id(pipower_pro_charge_control_value) = 0.0f;
          id(pipower_pro_charge_current_control).set_level(id(pipower_pro_charge_control_value));

interval:
  # Status LED Control
  - interval: 100ms
    then:
      - lambda: |-
          switch(id(pipower_pro_status_led_state)) {
            case 0:
              id(pipower_pro_status_led).turn_off();
              break;
            case 1:
              id(pipower_pro_status_led).turn_on();
              break;
            case 2: // blink slow
              if (id(pipower_pro_status_led_count) / 10 % 2 == 0) {
                id(pipower_pro_status_led).turn_on();
              } else {
                id(pipower_pro_status_led).turn_off();
              }
              break;
            case 3: // blink fast
              if (id(pipower_pro_status_led_count) / 5 % 2 == 0) {
                id(pipower_pro_status_led).turn_on();
              } else {
                id(pipower_pro_status_led).turn_off();
              }
              break;
          }
          id(pipower_pro_status_led_count) += 1;
          id(pipower_pro_status_led_count) = id(pipower_pro_status_led_count) % 20;
  # Wi-Fi connect sync to global
  - interval: 1s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - globals.set:
              id: pipower_pro_wifi_connected
              value: "true"
        else:
          - globals.set:
              id: pipower_pro_wifi_connected
              value: "false"
  # Change LED state according to Wi-Fi connection
  - interval: 1s
    then:
      - lambda: |-
          if (id(pipower_pro_wifi_connected) != id(pipower_pro_last_wifi_connected) && id(pipower_pro_power_switch_current_state) == true) {
            if (id(pipower_pro_wifi_connected) == true) {
              id(pipower_pro_status_led_state) = 1;
            } else {
              id(pipower_pro_status_led_state) = 2;
            }
            id(pipower_pro_last_wifi_connected) = id(pipower_pro_wifi_connected);
          }
